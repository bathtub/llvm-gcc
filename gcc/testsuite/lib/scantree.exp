#   Copyright (C) 2000, 2002, 2003, 2005, 2006 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  

# Various utilities for scanning tree dump output, used by gcc-dg.exp and
# g++-dg.exp.

# APPLE LOCAL begin lno
# Utility for diffing compiler result against an expected output file.
# Invoked via dg-final.  Call pass if there are no differences between
# the output of the compiler and the expected output file, otherwise
# fail.  The expected output file has the same name as the output
# file, and is stored in the same directory as the testcase.  
#
# Argument 0 is the suffix for the tree dump file
# Argument 1 handles expected failures and the like
proc diff-tree-dumps { args } {
    if { [llength $args] < 1 } {
	error "diff-tree-dumps: too few arguments"
        return
    }
    if { [llength $args] > 2 } {
	error "diff-tree-dumps:: too many arguments"
	return
    }
    if { [llength $args] >= 2 } {
	switch [dg-process-target [lindex $args 1]] {
	    "S" { }
	    "N" { return }
	    "F" { setup_xfail "*-*-*" }
	    "P" { }
	}
    }

    # This assumes that we are two frames down from dg-test, and that
    # it still stores the filename of the testcase in a local variable "name".
    # A cleaner solution would require a new dejagnu release.
    upvar 2 prog testcase
    
    # This must match the rule in gcc-dg.exp.
    # APPLE LOCAL Selective inlining of functions that use Altivec 3837835
    set new_file "[glob [file tail $testcase].\[ti\]??.[lindex $args 0]]"
    set reference_file "[glob $testcase.[lindex $args 0]]"
    
    set test_result [diff $reference_file $new_file]
    
    if { $test_result == 1 } {
	pass "$testcase diff-tree-dumps [lindex $args 0]"
    } else {
	fail "$testcase diff-tree-dumps [lindex $args 0]"
	local_exec (diff $reference_file $new_file 0);
    }
}
# APPLE LOCAL end lno

load_lib scandump.exp

# Utility for scanning compiler result, invoked via dg-final.
# Call pass if pattern is present, otherwise fail.
#
# Argument 0 is the regexp to match
# Argument 1 is the name of the dumped tree pass
# Argument 2 handles expected failures and the like
proc scan-tree-dump { args } {

    if { [llength $args] < 2 } {
	error "scan-tree-dump: too few arguments"
	return
    }
    if { [llength $args] > 3 } {
	error "scan-tree-dump: too many arguments"
	return
    }
    if { [llength $args] >= 3 } {
	# APPLE LOCAL begin Selective inlining of functions that use Altivec 3837835
	scan-dump "tree" [lindex $args 0] "\[0-9\]\[0-9\]\[0-9\]\[ti\].[lindex $args 1]" [lindex $args 2]
    } else {
	scan-dump "tree" [lindex $args 0] "\[0-9\]\[0-9\]\[0-9\]\[ti\].[lindex $args 1]"
	# APPLE LOCAL end Selective inlining of functions that use Altivec 3837835
    }
}

# Call pass if pattern is present given number of times, otherwise fail.
# Argument 0 is the regexp to match
# Argument 1 is number of times the regexp must be found
# Argument 2 is the name of the dumped tree pass
# Argument 3 handles expected failures and the like
proc scan-tree-dump-times { args } {

    if { [llength $args] < 3 } {
	error "scan-tree-dump: too few arguments"
	return
    }
    if { [llength $args] > 4 } {
	error "scan-tree-dump: too many arguments"
	return
    }
    if { [llength $args] >= 4 } {
	# APPLE LOCAL begin Selective inlining of functions that use Altivec 3837835
	scan-dump-times "tree" [lindex $args 0] [lindex $args 1] \
			"\[0-9\]\[0-9\]\[0-9\]\[ti\].[lindex $args 2]" [lindex $args 3]
    } else {
	scan-dump-times "tree" [lindex $args 0] [lindex $args 1] \
			"\[0-9\]\[0-9\]\[0-9\]\[ti\].[lindex $args 2]"
	# APPLE LOCAL end Selective inlining of functions that use Altivec 3837835
    }
}

# Call pass if pattern is not present, otherwise fail.
#
# Argument 0 is the regexp to match
# Argument 1 is the name of the dumped tree pass
# Argument 2 handles expected failures and the like
proc scan-tree-dump-not { args } {

    if { [llength $args] < 2 } {
	error "scan-tree-dump-not: too few arguments"
	return
    }
    if { [llength $args] > 3 } {
	error "scan-tree-dump-not: too many arguments"
	return
    }
    if { [llength $args] >= 3 } {
	# APPLE LOCAL begin Selective inlining of functions that use Altivec 3837835
	scan-dump-not "tree" [lindex $args 0] \
		      "\[0-9\]\[0-9\]\[0-9\]\[ti\].[lindex $args 1]" [lindex $args 2]
    } else {
	scan-dump-not "tree" [lindex $args 0] \
		      "\[0-9\]\[0-9\]\[0-9\]\[ti\].[lindex $args 1]"
	# APPLE LOCAL end Selective inlining of functions that use Altivec 3837835
    }
}

# Utility for scanning demangled compiler result, invoked via dg-final.
# Call pass if pattern is present, otherwise fail.
#
# Argument 0 is the regexp to match
# Argument 1 is the name of the dumped tree pass
# Argument 2 handles expected failures and the like
proc scan-tree-dump-dem { args } {

    if { [llength $args] < 2 } {
	error "scan-tree-dump-dem: too few arguments"
	return
    }
    if { [llength $args] > 3 } {
	error "scan-tree-dump-dem: too many arguments"
	return
    }
    if { [llength $args] >= 3 } {
	# APPLE LOCAL begin Selective inlining of functions that use Altivec 3837835
	scan-dump-dem "tree" [lindex $args 0] \
		      "\[0-9\]\[0-9\]\[0-9\]\[ti\].[lindex $args 1]" [lindex $args 2]
    } else {
	scan-dump-dem "tree" [lindex $args 0] \
		      "\[0-9\]\[0-9\]\[0-9\]\[ti\].[lindex $args 1]"
	# APPLE LOCAL end Selective inlining of functions that use Altivec 3837835
    }
}

# Call pass if demangled pattern is not present, otherwise fail.
#
# Argument 0 is the regexp to match
# Argument 1 is the name of the dumped tree pass
# Argument 2 handles expected failures and the like
proc scan-tree-dump-dem-not { args } {

    if { [llength $args] < 2 } {
	error "scan-tree-dump-dem-not: too few arguments"
	return
    }
    if { [llength $args] > 3 } {
	error "scan-tree-dump-dem-not: too many arguments"
	return
    }
    if { [llength $args] >= 3 } {
	# APPLE LOCAL begin Selective inlining of functions that use Altivec 3837835
	scan-dump-dem-not "tree" [lindex $args 0] \
			  "\[0-9\]\[0-9\]\[0-9\]\[ti\].[lindex $args 1]" \
			  [lindex $args 2]
    } else {
	scan-dump-dem-not "tree" [lindex $args 0] \
			  "\[0-9\]\[0-9\]\[0-9\]\[ti\].[lindex $args 1]"
	# APPLE LOCAL end Selective inlining of functions that use Altivec 3837835
    }
}
